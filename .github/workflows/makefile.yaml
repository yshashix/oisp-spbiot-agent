name: End2End Test
on:
  pull_request:
    branches:
      - development
  push:
    branches:
      - development
      - '**-debugtest'
jobs:
  build:
    env:
      SELF_HOSTED_RUNNER: true
    runs-on: private
    steps:
    - uses: actions/checkout@v3
      with:
        repository: Open-IoT-Service-Platform/platform-launcher.git
        ref: 'develop'
        path: platform-launcher
        submodules: recursive
    - uses: actions/checkout@v3
      with:
        repository: IndustryFusion/DigitalTwin
        path: ./DigitalTwin
    - name: Prepare Digital Twin
      shell: bash
      run: |
        if [ -z "${SELF_HOSTED_RUNNER}" ]; then
          ( cd ./DigitalTwin/test && bash ./prepare-platform.sh )
        else
          ( cd ./DigitalTwin/test && bash ./prepare-platform-for-self-hosted-runner.sh )
        fi
    - name: Prepare IFF Bats Framework
      shell: bash
      run: |
        cd ./DigitalTwin/test/bats
        bash ./prepare-test.sh
        bats linting.bats
        shellcheck *.sh *.bats test-*/*.bats
    - name: Build Digital Twin locally
      shell: bash
      run: |
        cd ./DigitalTwin/test && bash build-local-platform.sh
    - name: Install Digital Twin from local registry
      shell: bash
      run: |
        cd ./DigitalTwin/test
        retval=2
        loops=0
        until bash install-local-platform.sh || [ ${loops} -gt 3 ]; do
          loops=$((loops+1))
          echo loop: ${loops}
          k3d cluster delete iff-cluster
          if [ -z "${SELF_HOSTED_RUNNER}" ]; then
            bash ./prepare-platform.sh
          else
            bash ./prepare-platform-for-self-hosted-runner.sh
          fi
        done
        if [ ${loops} -gt 3 ]; then exit 1; fi
    - name: Setup main repo + subrepos
      shell: bash
      run: |
        export TERM=vt100
        cd platform-launcher
        if [ -z "${SELF_HOSTED_RUNNER}" ]; then
            sudo apt install jq
            wget https://github.com/txn2/kubefwd/releases/download/1.22.2/kubefwd_amd64.deb
            sudo dpkg -i kubefwd_amd64.deb
            echo "Change group of /etc/hosts"
            echo --------------------------
            sudo groupadd runner
            sudo chgrp runner /etc/hosts
            sudo usermod -a -G runner "${USER}"
            sudo chmod 664 /etc/hosts
            echo "Set suid flag for kubefwd"
            echo --------------------------
            sudo chown root /usr/local/bin/kubefwd
            sudo chmod +s /usr/local/bin/kubefwd
            echo "Edit /tmp permissions for kubefwd"
            sudo chgrp runner /tmp
            sudo chmod 755 /tmp
            sudo apt install acl
            sudo setfacl -Rdm g:runner:rwx /tmp
            sudo chmod g+s /tmp
        fi
        make update
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        path: platform-launcher/oisp-iot-agent
    - name: Prepare platform
      shell: bash
      working-directory: platform-launcher
      run: |
        export TERM=vt100
        if [ -z "${SELF_HOSTED_RUNNER}" ]; then
            cd util && \
            bash setup-ubuntu20.04.sh
        fi
    - name: Build platform
      working-directory: platform-launcher
      shell: bash
      run: |
        set +o pipefail
        export TERM=vt100
        yes | DOCKER_TAG=test NODOCKERLOGIN=true DEBUG=true make build
    - name: E2E Test
      id: e2etest
      working-directory: platform-launcher
      shell: bash
      run: |
        set +e
        export TERM=vt100
        export PATH=$PATH:/snap/bin
        make import-images DOCKER_TAG=test DEBUG=true
        docker image prune -a -f
        ls | grep "oisp-*" | grep -v oisp-iot-agent | xargs rm -rf
        npm install nodemailer
        export NODOCKERLOGIN=true
        retval=2
        loops=0
        export DOCKER_TAG=test
        export USE_LOCAL_REGISTRY=true
        until [ ${retval} -eq 0 ] || [ ${loops} -gt 3 ]; do
          make undeploy-oisp
          (for i in {1..20}; do sleep 60; echo .; done&) &&  make deploy-oisp-test
          make test-prep-only
          kubectl -n oisp label svc/emqx app=emqx
          # kubefwd gives error in the runner when forwarding WSS, disable it
          kubectl -n oisp patch svc emqx --patch '{"spec":{"ports":[{"name":"mqtt","port":1883,"protocol":"TCP","targetPort":"mqtt"}]}}' --type='merge'
          pkill kubefwd
          KUBECONFIG=~/.kube/config kubefwd svc -n oisp -l "app in (frontend, emqx)"&
          sleep 10
          cd ./oisp-iot-agent
          npm install
          cp ./config/config.json.circleci ./config/config.json
          rm -rf .prepare-testconfig data
          tmp=$(mktemp)
          jq ".connector.mqtt.port=1883|.connector.mqtt.secure=false" ./config/config.json > "${tmp}" && mv "${tmp}" ./config/config.json
          chmod u=rw,g=r,o=r ./config/config.json
          node oisp-admin.js initialize
          docker stop oisp-iot-agent
          make test
          retval=$?
          cd ..
          loops=$((loops+1))
        done
        echo Agent test return value: ${retval}
        exit ${retval}